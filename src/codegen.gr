module CodeGen

from "list" include List
from "array" include Array
from "buffer" include Buffer
from "path" include Path
from "string" include String
from "./metaModel.gr" include MetaModel
from "./utils/grainPrint.gr" include GrainPrint
from "./utils/Fs.gr" include Fs
from "./utils/utils.gr" include Utils
use Utils.{ toGrainUIdent }

let writeIndent = (indent, buffer) =>
  Buffer.addString(String.repeat(indent, "  "), buffer)
let generateDocumentationItem = (description, since, deprecated, indent, buffer) => {
  if (description != None || since != None || deprecated != None) {
    writeIndent(indent, buffer)
    Buffer.addString("/**\n", buffer)
    let hasSince = box(false)
    match (description) {
      Some(description) => {
        Array.forEach(line => {
          let mut line = String.trim(line)
          // TODO: This is not working right
          if (String.startsWith(line, "@since")) {
            line = String.replaceFirst("@since v", "@since", line)
            hasSince := true
          }
          writeIndent(indent, buffer)
          Buffer.addString(" * ", buffer)
          Buffer.addString(line, buffer)
          Buffer.addString("\n", buffer)
        }, String.split("\n", description))
      },
      None => void,
    }
    match (deprecated) {
      Some(deprecated) => {
        writeIndent(indent, buffer)
        Buffer.addString(" * @deprecated ", buffer)
        Buffer.addString(deprecated, buffer)
        Buffer.addString("\n", buffer)
      },
      None => void,
    }
    match (since) {
      Some(since) when !unbox(hasSince) => {
        writeIndent(indent, buffer)
        Buffer.addString(" * @since v", buffer)
        Buffer.addString(since, buffer)
        Buffer.addString("\n", buffer)
      },
      _ => void,
    }
    writeIndent(indent, buffer)
    Buffer.addString(" */\n", buffer)
  }
}

let generateRequest = () => void
let generateNotification = () => void
let generateStructure = () => void

let generateEnumerationEntry = (
  buffer,
  indent,
  enumerationEntry: MetaModel.LspEnumerationEntry,
) => {
  // name: String,
  // value: MetaModel.LspEnumerationEntryValue
  generateDocumentationItem(
    enumerationEntry.documentation,
    enumerationEntry.since,
    enumerationEntry.deprecated,
    indent,
    buffer
  )
  Buffer.addString("  ", buffer)
  Buffer.addString(toGrainUIdent(enumerationEntry.name), buffer)
  Buffer.addString(",\n", buffer)
  void
}
let generateEnumeration = (
  buffer,
  indent,
  enumeration: MetaModel.LspEnumeration,
) => {
  // Build documentation
  generateDocumentationItem(
    enumeration.documentation,
    enumeration.since,
    enumeration.deprecated,
    indent,
    buffer
  )
  // TODO: Build serialization
  // TODO: Build deserialization
  // Build enum
  Buffer.addString("enum ", buffer)
  Buffer.addString(toGrainUIdent(enumeration.name), buffer)
  Buffer.addString(" {\n", buffer)
  List.forEach(
    e => generateEnumerationEntry(buffer, indent + 1, e),
    enumeration.values
  )
  Buffer.addString("}\n", buffer)
}
let generateTypeAlias = () => void

provide let fromMetaModel = (metaModel: MetaModel.LspMetaModel) => {
  let enumerationBuffer = Buffer.make(0)
  Buffer.addString("module Enumerations\n", enumerationBuffer)
  GrainPrint.print(metaModel.requests)
  List.forEach(
    e => generateEnumeration(enumerationBuffer, 0, e),
    metaModel.enumerations
  )
  // TODO: temporary Write
  Fs.Binary.writeFile(
    Path.fromString("./out/enumeration.gr"),
    Buffer.toBytes(enumerationBuffer)
  )
  return Ok(void)
}
